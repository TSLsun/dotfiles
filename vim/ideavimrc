let mapleader=" "

""" IdeaVim only settings ------------------
" Join things together like comments and method chaining. Activated with shift+j
set ideajoin
" Define the mode that would be enabled during the refactoring
set idearefactormode=visual

""" Plugins (https://github.com/JetBrains/ideavim/wiki/Emulated-plugins)
Plug 'tpope/vim-surround'            " ys, cs, ds, S
Plug 'tpope/vim-commentary'          " gcc, gc + motion, v_gc
Plug 'preservim/nerdtree'
    let g:NERDTreeMapActivateNode='l'
    let g:NERDTreeMapJumpParent='h'
    nnoremap <C-n> :action SelectInProjectView <CR>
    "Esc - Back to editor, will keep the NERDTree window
    "q - Close the NERDTree window
    "t/T - Open file in new tab (T: keep cursor in NERDTree)
    "i/I - Open file in new h-split (I: keep cursor in NERDTree)
    "s/S - Open file in new v-split (S: keep cursor in NERDTree)
    "O - Recursively open the selected directory
    "x - Close dir
    "X - Close children
    "p->h - Jump to node parent
    "o->l - Open files, directories and bookmarks
    """ https://github.com/JetBrains/ideavim/wiki/NERDTree-support
Plug 'machakann/vim-highlightedyank' " show highlight when yank
Plug 'easymotion/vim-easymotion'
Plug 'michaeljsmith/vim-indent-object'
"Plug 'terryma/vim-multiple-cursors'

""" Settings -------------------------------
set showmode
set showcmd
set number
set relativenumber
set incsearch
set hlsearch
set ignorecase
set smartcase       " Override the 'ignorecase' option if the search pattern contains upper case characters
set scrolloff=4

""" Don't use Ex mode, use Q for formatting.
map Q gq

""" Some more setups
map <C-c> <Esc>
nnoremap <C-z> :action ToggleDistractionFreeMode<CR>
vnoremap < <gv
vnoremap > >gv

nnoremap \w :w<CR>
nnoremap \q :q<CR>
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>
nnoremap \c :action Assertions2AssertJ.ConvertFile<CR>
vnoremap \s :action SurroundWith<CR>

" toggle relativenumber
nmap <A-L> :set relativenumber!<CR>

" clear the search buffer when hitting return
nnoremap <leader>/ :nohlsearch<CR>
"nnoremap \<leader>/ :let @/=""<CR> " seems not working in ideaVim

" To copy text to the end-of-line, press Y.
" This mapping sets up Y to be consistent with
" the C and D operators, which act from the cursor
" to the end of the line. The default behavior of Y
" is to yank the whole line.
nnoremap Y yg$

""" Shortcut for copying to/from System Clipboard
nmap \y "+y
vmap \y "+y
nmap \d "+d
vmap \d "+d
nmap \p "+p
nmap \P "+P

" Greatest remap EVER!!
" Let me explain, this remap while in visual mode
" will delete what is currently highlighted and replace it
" with what is in the register BUT it will YANK (delete) it
" to a VOID register. Meaning I still have what I originally had
" when I pasted. I don't loose the previous thing I YANKED!
vnoremap \p "_dP

""" Split windows
sethandler <C-j> a:vim
sethandler <C-k> a:vim
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k

nnoremap <C-\> :action SplitVertically<CR>
nnoremap <C--> :action SplitHorizontally<CR>
nnoremap <C-=> :action Unsplit<CR>
nnoremap <C-m> :action MoveEditorToOppositeTabGroup<CR>

""" Navigate window
nnoremap <leader>en :action EditSourceInNewWindow<CR>
nnoremap <leader>w  :action NextWindow<CR>
nnoremap <leader>W  :action PreviousWindow<CR>
nnoremap <leader>qa :action CloseAllEditors<CR>

""" Fold & Unfold
nnoremap zc :action CollapseRegion<CR>
nnoremap zo :action ExpandRegion<CR>
nnoremap <leader>zc :action CollapseAllRegions<CR>
nnoremap <leader>zo :action ExpandAllRegions<CR>

""" Common usages
nnoremap <leader>R :action Refactorings.QuickListPopupAction<CR>
vnoremap <leader>R :action Refactorings.QuickListPopupAction<CR>
nnoremap <leader>= :action ReformatCode<CR>
nnoremap <leader>o :action OptimizeImports<CR>
nnoremap <leader>l :action RecentLocations<CR>

nnoremap \u :action QuickJavaDoc<CR>
nnoremap \i :action QuickImplementations<CR>
nnoremap \o :action QuickTypeDefinition<CR>

nnoremap \m :action FileStructurePopup<CR>

""" Source navigation
"nnoremap <M-]> :action Forward<CR>
"nnoremap <M-[> :action Back<CR>
nnoremap ]e :action GotoNextError<CR>
nnoremap [e :action GotoPreviousError<CR>
nnoremap ]c :action VcsShowNextChangeMarker<CR>
nnoremap [c :action VcsShowPrevChangeMarker<CR>
    "<A-M-z>: rollback change
    "<A-M-a>: stage change
    "<M-d>: show diff
nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>
nnoremap <leader>gc :action GotoClass<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gp :action GotoSuperMethod<CR>
nnoremap <leader>gt :action GotoTest<CR>
nnoremap <leader>gu :action ShowUsages<CR>
"nnoremap gr :action RecentFiles<CR>

""" Running and Debugging
nnoremap \f :action ChooseRunConfiguration<CR>
nnoremap <leader>b :action ToggleLineBreakpoint<CR>
nnoremap <leader>rc zz:action ReformatCode<CR>mmgg]]:action ContextRun<CR>`mzz
nnoremap <leader>rr zz:action ReformatCode<CR>zz:action Rerun<CR>
nnoremap <leader>rt :action ContextRun<CR>
nnoremap <leader>rd :action ContextDebug<CR>
nnoremap <leader>rf :action RerunFailedTests<CR>

""" ToolWindow
nnoremap <leader>sw :action ActivateStructureToolWindow<CR>
nnoremap <leader>fw :action ActivateFindToolWindow<CR>
nnoremap <leader>rw :action ActivateRunToolWindow<CR>
nnoremap <leader>dw :action ActivateDebugToolWindow<CR>
nnoremap <leader>Dw :action ActivateDatabaseToolWindow<CR>
nnoremap <leader>pw :action ActivateProblemsViewToolWindow<CR>
nnoremap <leader>lw :action ActivateSonarLintToolWindow<CR>
nnoremap <leader>tw :action ActivateTerminalToolWindow<CR>
nnoremap <leader>bw :action ActivateBuildToolWindow<CR>

nnoremap <leader>M :action MaximizeToolWindow<CR>
nnoremap <leader>hw :action HideActiveWindow<CR>
nnoremap <leader>ha :action HideAllWindows<CR>
nnoremap <C-p> :action JumpToLastWindow<CR>

""" Terminal
nnoremap <leader>nt :action Terminal.OpenInTerminal<CR>

""" Setup from joey
nnoremap <Tab> >>
nnoremap <S-Tab> <<
imap jj <Esc>
imap <C-a> <Esc>ma<CR>ggVG
nmap <BS> a<BS>

nmap z; A;<Esc>
imap z; <Esc>A;<Esc>

nmap zyp "0p
nmap zyP "0P
imap zyp <Esc>"0pa
imap zyP <Esc>"0Pa
vmap zyp "0p
vmap zyP "0P

""" Copy previous @Test method
imap <F1> <Esc>mby?@Test<CR>`bp?void<CR>w:noh<CR>
nmap <leader>tt mby?@Test<CR>`bpnnw<CR>w:noh<CR>
nmap <leader>ts mby?@Test<CR>`bpnn3w:noh<CR>

""" Navigation
nmap <leader><leader> :action AceAction<CR>
nmap <leader>\ :action AceTargetAction<CR>
nmap zh ^
imap zh <Esc>I
nmap zl $
imap zl <End>
"" zk zj navigation are buggy, use cmd + ]/[ instead
"nmap zk :action Back<CR>
"imap zk <Esc>:action Back<CR>
"nmap zj :action Forward<CR>
"imap zj <Esc>:action Forward<CR>
"imap zn <Esc>:action GotoNextError<CR>
"imap zN <Esc>:action GotoPreviousError<CR>
"nmap zgc zz:action CheckinProject<CR>
"nmap <M-k> :action CheckinProject<CR>

" refactor
nmap <leader>rn :action RenameElement<CR>
nmap <leader>ri :action Inline<CR>
nmap <leader>rm :action Move<CR>

nmap <leader>rf :action IntroduceField<CR>
vmap <leader>rf <Esc>:action IntroduceField<CR>
nmap <leader>rp :action IntroduceParameter<CR>
nmap <leader>sp vi":action IntroduceParameter<CR>
nmap <leader>rv :action IntroduceVariable<CR>
vmap <leader>rv <Esc>:action IntroduceVariable<CR>
vmap M :action ExtractMethod<CR>

"nmap zra zz:action RearrangeCode<CR>zz:action ReformatCode<CR>zz:action Rerun<CR>
"imap zra <Esc>zz:action RearrangeCode<CR>zz:action ReformatCode<CR>zz:action Rerun<CR>
"nmap zrn :action RenameElement<CR>
"nmap zri :action Inline<CR>
"imap zri <Esc>:action Inline<CR>
"nmap zro :action Move<CR>
"imap zro <Esc>:action Move<CR>
"nmap zrt :action SearchEverywhere<CR>
"imap zrt <Esc>:action SearchEverywhere<CR>

"nmap zrf :action IntroduceField<CR>
"imap zrf <Esc>:action IntroduceField<CR>
"nmap zrp :action IntroduceParameter<CR>
"imap zrp <Esc>:action IntroduceParameter<CR>
"nmap zsp vi":action IntroduceParameter<CR>
"nmap zrv :action IntroduceVariable<CR>
"vmap zrv <Esc>:action IntroduceVariable<CR>
"imap zrv <Esc>:action IntroduceVariable<CR>
"vmap zrm :action ExtractMethod<CR>
"vmap M :action ExtractMethod<CR>

nmap <C-S-k> :action MoveLineUp<CR>:action VimAutoIndentLines<CR>
vmap <C-S-k> :action MoveLineUp<CR>:action VimAutoIndentLines<CR>
imap <C-S-k> <Esc>:action MoveLineUp<CR>:action VimAutoIndentLines<CR>
nmap <C-S-j> :action MoveLineDown<CR>:action VimAutoIndentLines<CR>
vmap <C-S-j> :action MoveLineDown<CR>:action VimAutoIndentLines<CR>
imap <C-S-j> <Esc>:action MoveLineDown<CR>:action VimAutoIndentLines<CR>
"map <M-d> :action EditorDuplicateLines<CR>
"imap <M-d> <Esc>:action EditorDuplicateLines<CR>
nmap <A-d> :action EditorDeleteLine<CR>
vmap <A-d> :action EditorDeleteLine<CR>
imap <A-d> <Esc>:action EditorDeleteLine<CR>

"nmap <M-N> :action Generate<CR>
nmap <C-S-n> :action NewElementSamePlace<CR>

"*******************************
"" Vim-plug (plugin manager)
"*******************************

" Automatic installaion of vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
call plug#begin('~/.vim/plugged')

"*******************************
"" Install plugins
"*******************************

"" Autocompletion
"Plug 'neoclide/coc.nvim', {'branch': 'release'}

"" Fuzzy search files (fzf)
if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
endif
    map <C-p> :FZF<CR>

"" Project Drawer
Plug 'preservim/nerdtree' |
    \ Plug 'Xuyuanp/nerdtree-git-plugin' |
    \ Plug 'ryanoasis/vim-devicons' |
    \ Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

"" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

"" Handy plugins
Plug 'preservim/nerdcommenter'                  " [count]<leader>c<space> |NERDCommenterToggle|
Plug 'tpope/vim-surround'                       " ys, cs, ds, S(VISUAL mode)
Plug 'tpope/vim-repeat'                         " Support `.` for vim-surround
Plug 'google/vim-searchindex'                   " Display nice [N/n] when searching
Plug 'psliwka/vim-smoothie'                     " Smooth scrolling for Vim
Plug 'machakann/vim-highlightedyank'            " Show highlight when yank
"Plug 'easymotion/vim-easymotion'
"Plug 'terryma/vim-multiple-cursors'
Plug 'jiangmiao/auto-pairs'
Plug 'Yggdroot/indentLine'
"Plug 'sillybun/vim-repl'
"Plug 'dense-analysis/ale'                      " Asynchronous Lint Engine
"Plug 'preservim/tagbar'                        " Class outline viewer
"Plug 'vim-syntastic/syntastic'                 " Syntax checking plugin
"Plug 'sheerun/vim-polyglot'                    " Syntax highlighting


"" Markdown plugins
"Plug 'iamcco/markdown-preview.vim'
"Plug 'godlygeek/tabular'
"Plug 'plasticboy/vim-markdown'
    "let g:vim_markdown_folding_disabled = 1

"" Latex plugins
"Plug 'lervag/vimtex'
    "let g:tex_flavor='latex'
    ""let g:vimtex_view_method='open -a Preview'
    "let g:vimtex_view_method='skim'
    ""let g:vimtex_quickfix_mode=0
""Plug 'KeitaNakamura/tex-conceal.vim'
    ""set conceallevel=1
    ""let g:tex_conceal='abdmg'
    
    "" Snippets
    "Plug 'SirVer/ultisnips'
        "let g:UltiSnipsExpandTrigger = '<c-tab>'
        ""let g:UltiSnipsJumpForwardTrigger = '<tab>'
        ""let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
        "let g:UltiSnipsSnippetDirectories=["UltiSnips"]

"" Writing plugins
"Plug 'rhysd/vim-grammarous'

" Theme
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
    "let g:gruvbox_italic=1
    let g:gruvbox_contrast_dark='hard'

call plug#end()

"*******************************
"" Plugins Specific
"*******************************

" coc.nvim settings:
    "let g:coc_global_extensions=[ 'coc-python', 'coc-snippets', 'coc-json' ]
      ""'coc-emoji', 'coc-eslint', 'coc-prettier',
      ""'coc-tsserver', 'coc-tslint', 'coc-tslint-plugin',
      ""'coc-css', 'coc-json', 'coc-pyls', 'coc-yaml'

    "" if hidden is not set, TextEdit might fail.
    "set hidden
    "" Some servers have issues with backup files, see #649
    "set nobackup
    "set nowritebackup
    "" Better display for messages
    "set cmdheight=1
    "" Smaller updatetime for CursorHold & CursorHoldI
    "set updatetime=300
    "" don't give |ins-completion-menu| messages.
    "set shortmess+=c
    "" always show signcolumns
    "set signcolumn=yes

    "" Use tab for trigger completion with characters ahead and navigate.
    "" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    "inoremap <silent><expr> <TAB>
          "\ pumvisible() ? "\<C-n>" :
          "\ <SID>check_back_space() ? "\<TAB>" :
          "\ coc#refresh()
    "inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    "function! s:check_back_space() abort
      "let col = col('.') - 1
      "return !col || getline('.')[col - 1]  =~# '\s'
    "endfunction

    "" Use <c-space> to trigger completion.
    "inoremap <silent><expr> <c-space> coc#refresh()

    "" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
    "" Coc only does snippet and additional edit on confirm.
    "inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    "" Or use `complete_info` if your vim support it, like:
    "" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

    "" Use `[g` and `]g` to navigate diagnostics
    "nmap <silent> [g <Plug>(coc-diagnostic-prev)
    "nmap <silent> ]g <Plug>(coc-diagnostic-next)

    "" Remap keys for gotos
    "nmap <silent> gd <Plug>(coc-definition)
    "nmap <silent> gy <Plug>(coc-type-definition)
    "nmap <silent> gi <Plug>(coc-implementation)
    "nmap <silent> gr <Plug>(coc-references)

    "" Use K to show documentation in preview window
    "nnoremap <silent> K :call <SID>show_documentation()<CR>

    "function! s:show_documentation()
      "if (index(['vim','help'], &filetype) >= 0)
        "execute 'h '.expand('<cword>')
      "else
        "call CocAction('doHover')
      "endif
    "endfunction

    "" Highlight symbol under cursor on CursorHold
    "autocmd CursorHold * silent call CocActionAsync('highlight')

    "" Remap for rename current word
    "nmap <leader>rn <Plug>(coc-rename)

    "" Remap for format selected region
    "xmap <leader>f  <Plug>(coc-format-selected)
    "nmap <leader>f  <Plug>(coc-format-selected)

    "augroup mygroup
      "autocmd!
      "" Setup formatexpr specified filetype(s).
      "autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      "" Update signature help on jump placeholder
      "autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    "augroup end

    "" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    "xmap <leader>a  <Plug>(coc-codeaction-selected)
    "nmap <leader>a  <Plug>(coc-codeaction-selected)

    "" Remap for do codeAction of current line
    "nmap <leader>ac  <Plug>(coc-codeaction)
    "" Fix autofix problem of current line
    "nmap <leader>qf  <Plug>(coc-fix-current)

    "" Create mappings for function text object, requires document symbols feature of languageserver.
    "xmap if <Plug>(coc-funcobj-i)
    "xmap af <Plug>(coc-funcobj-a)
    "omap if <Plug>(coc-funcobj-i)
    "omap af <Plug>(coc-funcobj-a)

    "" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
    "nmap <silent> <TAB> <Plug>(coc-range-select)
    "xmap <silent> <TAB> <Plug>(coc-range-select)

    "" Use `:Format` to format current buffer
    "command! -nargs=0 Format :call CocAction('format')

    "" Use `:Fold` to fold current buffer
    "command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    "" use `:OR` for organize import of current buffer
    "command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    "" Add status line support, for integration with other plugin, checkout `:h coc-status`
    "set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    "" Using CocList
    "" Show all diagnostics
    "nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    "" Manage extensions
    "nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    "" Show commands
    "nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    "" Find symbol of current document
    "nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    "" Search workspace symbols
    "nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    "" Do default action for next item.
    "nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    "" Do default action for previous item.
    "nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    "" Resume latest coc list
    "nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" vim-airline settings:
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#tab_nr_type = 1
    let g:airline#extensions#tabline#tab_min_count = 2
    "let g:airline#extensions#tabline#show_tab_nr = 0 " disable tab numbers
    let g:airline#extensions#tabline#show_tab_type = 0
    "let g:airline#extensions#tabline#show_close_button = 0
    let g:airline#extensions#tabline#tabs_label = ''
    let g:airline#extensions#tabline#buffers_label = ''
    let g:airline#extensions#tabline#fnamemode = ':t'
    let g:airline#extensions#tabline#show_tab_count = 0
    let g:airline#extensions#tabline#show_buffers = 0 " dont show buffers in the tabline
    let g:airline#extensions#tabline#show_splits = 0
    "let g:airline#extensions#whitespace#enabled = 0
    "let g:airline#extensions#whitespace#symbol = '!'
    "let g:airline_section_b = '%{strftime("%H:%M")}'

" nerdtree settings:
    nnoremap <C-n> :NERDTreeToggle<CR>
    " Open the existing NERDTree on each new tab.
    autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
    " Start NERDTree when Vim starts with a directory argument.
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
        \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif
    " Close the tab if NERDTree is the only window remaining in it.
    autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
    " Git symbols
    let g:NERDTreeGitStatusUseNerdFonts = 1
    let g:NERDTreeGitStatusConcealBrackets = 1
    " After re-sourcing vimrc, fix syntax matching issues (concealing brackets):
    if exists('g:loaded_webdevicons')
      call webdevicons#refresh()
    endif

" tagbar settings (need to installed ctags)
    "let g:tagbar_ctags_bin = '/usr/local/Cellar/ctags/5.8_1/bin/ctags'
    "map <C-m> :TagbarToggle<CR>

" REPL settings
    "let g:repl_program = {
                "\   'python': 'ipython',
                "\   'default': 'zsh',
                    "\   }
    "let g:repl_predefine_python = {
                "\   'numpy': 'import numpy as np',
                "\   'matplotlib': 'from matplotlib import pyplot as plt'
                "\   }
    "let g:repl_cursor_down = 1
    "let g:repl_python_automerge = 1
    "let g:repl_ipython_version = '7'
    "nnoremap <leader>t :REPLToggle<Cr>
    "autocmd Filetype python nnoremap <F12> <Esc>:REPLDebugStopAtCurrentLine<Cr>
    "autocmd Filetype python nnoremap <F10> <Esc>:REPLPDBN<Cr>
    "autocmd Filetype python nnoremap <F11> <Esc>:REPLPDBS<Cr>
    """ options
    ""let g:repl_width = None                    "REPL window width
    ""let g:repl_height = None                   "REPL window height
    "let g:sendtorepl_invoke_key = "<leader>r"   "send code to REPL, default is `<leader>w`
    "let g:repl_position = 3                     "0 DOWN/ 1 Up/ 2 Left/ 3 Right
    ""let g:repl_stayatrepl_when_open = 0


"*******************************
"" General settings
"*******************************

" Some basics:
    set nocompatible
    filetype plugin indent on
    syntax on
    set encoding=utf-8
    set number relativenumber
    set mouse=a

" Enable autocompletion on command line
    set wildmode=longest,list,full

" Shortcutting split navigation, saving keypress:
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l

" :set paste toggle
    set pastetoggle=<leader>p

" Enable to paste from vim to clipboard
    if has('clipboard')       " There is a chance that CP is not available in nvim
        if has('unnamedplus') " When possible use + register for copy-paste
            set clipboard=unnamed,unnamedplus
        else                  " On mac and Windows, use * register for copy-paste
            set clipboard=unnamed
        endif
    endif

" more settings:
    set ruler                 " Show the line and column number of the cursor position
    set cindent               " C-style autoindent
    set cursorline            " Highlight line under cursor
    set expandtab             " turn tab to space in file
    set backspace=2           " set backspace=indent,eol,start
    set tabstop=4             " turn tab into 4 spaces
    set shiftwidth=4          " indent using 4 spaces
    set hlsearch incsearch
    set ignorecase smartcase
    set splitbelow splitright " Always focus on splited window
    set noshowmode            " vim-airline status bar shows the mode already
    set scrolloff=4           " Keep lines above or below the cursor when scrolling
    set conceallevel=0
    set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<
    " F3: Toggle list (display unprintable characters)
    nnoremap <F3> :set list!<CR>  

" for latex
    "autocmd FileType tex set autoindent
    " Set the make program (rubber)
    "autocmd FileType tex set makeprg=rubber\ --inplace\ --maxerr\ 1\ \ --pdf\ --short\ --quiet\ --force\ %
    " Mappings for compiling Latex file
    autocmd FileType tex nmap <buffer> <C-T> :!latexmk -pdf -pvc %<CR>
    autocmd FileType tex nmap <buffer> T :!open -a Skim %<.pdf %<.pdf<CR><CR>
    "autocmd FileType tex nmap <buffer> C :!rubber --clean<CR>
    autocmd FileType tex set tabstop=2

" for python
    let python_highlight_all=1
    autocmd Filetype python syn match pythonBoolean "\(\W\|^\)\@<=self\(\.\)\@="
    autocmd Filetype python syn match pythonBoolean "\((\)\@<=self\(\,\)\@="
    autocmd Filetype python set tabstop=4
    autocmd Filetype python set softtabstop=4
    autocmd Filetype python set shiftwidth=4
    " autocmd Filetype python set textwidth=79
    autocmd Filetype python set expandtab
    autocmd Filetype python set autoindent
    autocmd Filetype python set fileformat=unix
    autocmd Filetype python set foldmethod=indent
    autocmd Filetype python set foldlevel=99
    autocmd FileType python nnoremap <Space> za
    "autocmd BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
    "autocmd Filetype python hi pythonBoolean ctermfg=93
    "autocmd Filetype python hi pythonBooleanbefore ctermfg=93

" some shortcut:
    nnoremap <leader>w :w<cr>
    nnoremap <leader>q :q<cr>

    " clear search highlight
    nnoremap <space>/ :noh<cr>
    nnoremap <leader><space>/ :let @/=""<cr>

    " Y yanks from the cursor to the end of line as expected. See :help Y.
    nnoremap Y y$

    " to stay at the cursor position
    vnoremap < <gv
    vnoremap > >gv

    "" copy all contents - `:%y+<cr>`

" COLOR settings
    set laststatus=2
    set t_Co=256
    set background=dark
    colorscheme gruvbox

" for terminal mode
    tnoremap <C-n> <C-w>N
    tnoremap <ScrollWheelUp> <C-w>Nk
    tnoremap <ScrollWheelDown> <C-w>Nj

